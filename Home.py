import streamlit as st
import pandas as pd
from PIL import Image
import pickle
import json
import shap
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="Credit application",
    page_icon="moneybag",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'About': "# Application d√©velopp√©e par Mikael Andr√©"
    }
)

##########################
# Chargement des donn√©es #
##########################
# Images
@st.experimental_singleton
def load_image():
    pouce_vert = Image.open('images/pouce_vert.png')
    pouce_rouge = Image.open("images/pouce_rouge.png")
    logo = Image.open("images/logo.jpg")
    return pouce_vert, pouce_rouge, logo

pouce_vert, pouce_rouge, logo = load_image()

# Donn√©es
@st.experimental_memo
def load_data():
    data_test = pd.read_parquet("saved_data/small_test1.parquet")
    data_test = data_test.set_index("SK_ID_CURR")
    #data_test = data_test.rename(columns = lambda x:re.sub('[^A-Za-z0-9_]+', '', x))
    data_test = data_test.drop(data_test.columns[[0,1]], axis=1)
    with open("saved_data/model1.pkl", 'rb') as file:
        model = pickle.load(file)
    col_info = pd.read_csv("saved_data/col_info.csv")
    with open("saved_data/shap_values1.pkl", 'rb') as file :
        shap_values = pickle.load(file)
    info_client = pd.read_parquet("saved_data/info_client.parquet")
    with open("saved_data/dict_nn1.txt") as file :
        tmp = file.read()
    dict_nn = json.loads(tmp)
    return data_test, model, col_info, shap_values, info_client, dict_nn

data_test, model, col_info, shap_values, info_client, dict_nn = load_data()

# set variables
expected_value = 0.07576103670792426
best_tresh_scoring1 = 0.03807862092076406 
best_tresh_scoring2 = 0.07268097663014822
probs = model.predict_proba(data_test)
pred_score1 = model.predict_proba(data_test)[:,1] >= best_tresh_scoring1
pred_score2 = model.predict_proba(data_test)[:,1] >= best_tresh_scoring2
feats = data_test.columns
client_list = data_test.index.to_list()
client_list = data_test.index.to_list()

col1 = st.sidebar


col1.header("S√©lection du client:")

selection = col1.selectbox(
        "Quel client ?",
        client_list, key="client_id",)

check_key = st.session_state.get("new_client", "empty")


@st.experimental_singleton
def selection_client(selection):
    st.session_state["new_client"] = selection
    st.session_state["client_idx"] =client_list.index(selection)
    idx_nn_prob = dict_nn[str(st.session_state["new_client"])][0]
    idx_nn_shap = dict_nn[str(st.session_state["new_client"])][1]
    st.session_state["idx_nn_prob"]= idx_nn_prob
    st.session_state["idx_nn_shap"]= idx_nn_shap    

selection_client(selection)
if check_key == "empty":
    col1.header('Client s√©lectionn√©')
    col1.write('Client ID : 100001')
else:
    col1.header('Client s√©lectionn√©')
    col1.write("Client ID :",str(st.session_state.new_client))
# save variables to use on other pages




idx = st.session_state["client_idx"]


col1.image(logo)


# Fonctions
def glossaire():
    features_list = col_info["features"]

    expander1 = st.expander("Voir Glossaire")
    explication = expander1.multiselect("Quel terme", options = features_list, help="Tapez votre recherche")
    return expander1.table(col_info[col_info["features"].isin(explication)][["features","Description"]])

st.write("# Bienvenue sur l'application pour les cr√©dits ")
st.markdown(
    """ 
    Cette application vous permet de voir la d√©cision d'octroi de cr√©dit
     pour un client, de pouvoir lui expliquer cette d√©cision 
     et de consulter ses informations descriptives.
    
    ### Quels clients ?
    La base de donn√©e est compos√©e d'environ 50 000 clients en attente d'une d√©cision.

    Plusieurs options vous seront propos√©es dans cette barre sur les diff√©rentes pages.
    ### Comment est bas√©e la d√©cision ?
    - Un algorythme pr√©dit la probabilit√© de non remboursement du client
    - Vous pouvez choisir entre 2 choix :
        - üí∞ Le plus rentable : le seuil acceptable est fix√© √† 3.8 %
            Nous nous assurons d'avoir le plus de client fiables mais refusont beaucoup de clients
        - üë´ Recrutement Client : le seuil acceptable est fix√© √† 7.3%
            Nous recrutons le maximum de clients tout en √©tant rentable

    #### Sommaire
    üëà Vous pouvez naviguer en s√©lectionnant les pages dans la barre de droite.
    - Statut du cr√©dit :
        - Probabilit√©
        - D√©cision en fonction de la politique choisie
    - Explications :
        - Comments ses donn√©es influences sa probabilit√©s
    - Comparaison :
        - Comparaison avec des clients similaires
    - Informations personnelles
        - Consultation des donn√©es brutes avant transformation
     """
)

# summary plot



# def summary_plot(shap_values, data_test):
#     shap.summary_plot(shap_values, data_test, show = False, max_display = 15, plot_size = (10,5))
    
# summary_plot(shap_values, data_test)

st.pyplot(bbox_inches='tight')
plt.clf()






